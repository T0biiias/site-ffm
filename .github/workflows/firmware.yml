name: Build ffmuc firmware

on:
  workflow_dispatch:
  push:
    tags:
      - v*
  pull_request:
    paths-ignore:
      - '**.md'
      - '**/CODEOWNERS'
      - '.github/ISSUE_TEMPLATE'
      - '.github/*.yml'
      - 'contrib/sign.sh'

jobs:
  generate_target_matrix:
    runs-on: ubuntu-latest
    outputs:
      target_json: ${{ steps.set_target.outputs.target }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set target matrix
        id: set_target
        shell: bash
        run: |
          target_list=$(cat targets | jq -Rsc '.[:-1] | split("\n")')
          echo "target={\"target\": $(echo $target_list)}" >> $GITHUB_OUTPUT

  build_firmware:
    needs: generate_target_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_target_matrix.outputs.target_json) }}
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Install build dependencies
        run: |
          sudo -E ./scripts/install_build_dependencies.sh
      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          git checkout -b patched ${GITHUB_SHA}
          make BROKEN=1 GLUON_TARGETS=${{ matrix.target }} V=s
          echo "status=success" >> $GITHUB_OUTPUT
      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.target }}_output
          path: ./output

  create_release:
    runs-on: ubuntu-latest
    needs: build_firmware
    if: github.event_name != 'pull_request'
    outputs:
      output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          generate_release_notes: true

  upload_release:
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_target_matrix.outputs.target_json) }}
    runs-on: ubuntu-latest
    needs:
      - create_release
      - generate_target_matrix
    if: github.event_name != 'pull_request'
    steps:
      - name: Download Artifact ${{ matrix.target }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}_output
          path: ${{ matrix.target }}_output
      - name: Create ${{ matrix.target }}_output.tar.gz
        run: tar zcvf ${{ matrix.target }}_output.tar.gz ${{ matrix.target }}_output
      - name: Upload Release Asset ${{ matrix.target }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.output1 }}
          asset_path: ./${{ matrix.target }}_output.tar.gz
          asset_name: ${{ matrix.target }}_output.tar.gz
          asset_content_type: application/gzip
